name: Test, Build and Publish Projects

on:
  workflow_dispatch:
  pull_request:
    branches: [master]
  push:
    tags:
      - "v**"
      - "ai-beta.**"
    branches:
      - master

concurrency: ${{ github.workflow }}-${{ github.ref }}

env:
  INTERNAL_CR: ccimage.pku.edu.cn

jobs:
  test-version-packages:
    name: Test and version packages
    runs-on: ${{ vars.ACTION_RUNNER_LABEL }}

    permissions:
      contents: write
      pull-requests: write

    steps:
      - uses: actions/checkout@v4
        with:
          # changelog generation requires full history
          # to track each changelog file to its submission commit
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Install packages
        run: |
          # Use PKU mirrors
          sudo sed -ri.bak -e 's/\/\/.*?(archive.ubuntu.com|mirrors.*?)\/ubuntu/\/\/mirrors.pku.edu.cn\/ubuntu/g' -e '/security.ubuntu.com\/ubuntu/d' /etc/apt/sources.list

          # Prepare sources for docker compose
          curl -fsSL https://mirrors.pku.edu.cn/docker-ce/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
          echo \
            "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://mirrors.pku.edu.cn/docker-ce/linux/ubuntu \
            $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

          sudo apt update
          sudo apt install -y openssh-client docker-compose-plugin

          export HTTPS_PROXY=${{ vars.HTTPS_PROXY }}

      - uses: pnpm/action-setup@v4.0.0

      - uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: pnpm
          registry-url: https://registry.npmmirror.com

      - name: Install dependencies
        run: |
          pnpm config set registry https://registry.npmmirror.com
          pnpm i --frozen-lockfile

      - name: Prepare dev libs and code
        run: pnpm prepareDev

      - name: Lint code
        run: pnpm lint

      - name: Generate SSH key pairs for test
        if: vars.RUN_TESTS == 'true'
        run: ssh-keygen -t rsa -f "$HOME/.ssh/id_rsa" -N ""

      - name: Log in to the ${{ env.INTERNAL_CR }}
        uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567
        with:
          registry: ${{ env.INTERNAL_CR }}
          username: ${{ secrets.CCIMAGE_USERNAME }}
          password: ${{ secrets.CCIMAGE_PASSWORD }}

      - name: Start dev env for db testing
        if: vars.RUN_TESTS == 'true'
        run: |
          SSH_AUTHORIZED_PUBLIC_KEY="$(cat $HOME/.ssh/id_rsa.pub)" pnpm devenv --build

      - name: Check running containers
        if: vars.RUN_TESTS == 'true'
        run: docker ps

      - name: Wait for ports
        if: vars.RUN_TESTS == 'true'
        uses: ifaxity/wait-on-action@v1.2.1
        with:
          log: true
          verbose: true
          resource: "tcp:localhost:22222 tcp:localhost:3306 tcp:localhost:6379 tcp:localhost:389 tcp:localhost:6000 tcp:localhost:6001 tcp:localhost:6002"

      - name: Run tests
        if: vars.RUN_TESTS == 'true'
        run: |
          # Unset proxy for tests
          export https_proxy=""
          export http_proxy=""
          export HTTPS_PROXY=""
          export HTTP_PROXY=""

          pnpm test:ci

      - name: Upload test converage
        uses: codecov/codecov-action@v4
        if: vars.RUN_TESTS == 'true'
        with:
          files: ./libs/auth/coverage/lcov.info,./libs/ssh/coverage/lcov.info,./libs/libconfig/coverage/lcov.info,./libs/decimal/coverage/lcov.info,./libs/server/coverage/lcov.info,./apps/cli/coverage/lcov.info,./apps/auth/coverage/lcov.info,./apps/mis-server/coverage/lcov.info,./apps/portal-server/coverage/lcov.info,./apps/gateway/coverage/lcov.info,./apps/audit-server/coverage/lcov.info

      - name: Create Release Pull Request
        id: changesets
        uses: changesets/action@v1
        if: vars.RUN_RELEASE == 'true' && github.ref == 'refs/heads/master'
        with:
          version: pnpm ci:version
        env:
          GITHUB_TOKEN: ${{ github.token }}

  scow-cli:
    runs-on: ${{ vars.ACTION_RUNNER_LABEL }}

    steps:
      - uses: actions/checkout@v4

      - uses: pnpm/action-setup@v4.0.0

      - uses: actions/setup-node@v4
        with:
          node-version: 18.x
          cache: pnpm

      - name: Install dependencies for scow-cli
        env:
          HTTPS_PROXY: ${{ vars.HTTPS_PROXY }}
        run: |
          pnpm config set registry https://registry.npmmirror.com
          pnpm i --frozen-lockfile --filter @scow/cli...

      - name: Build scow-cli
        run: pnpm build "--filter=@scow/cli"

      - name: Archive scow-cli-x64
        uses: actions/upload-artifact@v4
        with:
          name: scow-cli-x64
          path: apps/cli/exe/cli-x64

      - name: Archive scow-cli-arm64
        uses: actions/upload-artifact@v4
        with:
          name: scow-cli-arm64
          path: apps/cli/exe/cli-arm64


  build-images:
    runs-on: ${{ vars.ACTION_RUNNER_LABEL }}

    permissions:
      contents: read
      packages: write

    strategy:
      matrix:
        include:
          - name: scow
            file: scow
            build_args: ""

          - name: docs
            file: docs
            build_args: BASE_PATH=/SCOW/

    steps:
      - uses: actions/checkout@v4

      - name: Log in to the ${{ env.INTERNAL_CR }}
        uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567
        with:
          registry: ${{ env.INTERNAL_CR }}
          username: ${{ secrets.CCIMAGE_USERNAME }}
          password: ${{ secrets.CCIMAGE_PASSWORD }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          image: ${{ env.INTERNAL_CR }}/mirror/tonistiigi/binfmt:latest

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            env.http_proxy=${{ vars.HTTPS_PROXY }}
            env.https_proxy=${{ vars.HTTPS_PROXY }}
            image=ccimage.pku.edu.cn/mirror/moby/buildkit:buildx-stable-1

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.INTERNAL_CR }}/scow/${{ matrix.name }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          build-args: |
            HTTPS_PROXY=${{ vars.HTTPS_PROXY }}
            NO_PROXY=mirrors.pku.edu.cn
            ${{ matrix.build_args }}
          tags: ${{ steps.meta.outputs.tags }}
          file: docker/Dockerfile.${{ matrix.file }}
          labels: ${{ steps.meta.outputs.labels }}
          # only build arm64 in tag commits or branches with name starting with `arm-`
          platforms: linux/amd64${{ (github.ref_type == 'tag' || startsWith(github.ref_name, 'arm-')) && ',linux/arm64' || '' }}


  release:
    runs-on: ${{ vars.ACTION_RUNNER_LABEL }}
    needs:
      - scow-cli
      - build-images

    if: github.ref_type == 'tag'

    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v4

      - uses: pnpm/action-setup@v4.0.0

      - uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: pnpm
          registry-url: https://registry.npmmirror.com

      - name: Download cli-x64
        uses: actions/download-artifact@v4
        with:
          name: scow-cli-x64
          path: release/scow-cli

      - name: Download cli-arm64
        uses: actions/download-artifact@v4
        with:
          name: scow-cli-arm64
          path: release/scow-cli

      - name: Display structure of downloaded files
        run: ls -R
        working-directory: release

      - name: Pack SCOW API
        id: pack-scow-api
        run: |
          cd protos
          output_file=$(pnpm pack)
          full_path=$(realpath $output_file)
          echo "Packed SCOW API to $full_path"
          echo "scow_api_file=$(realpath $full_path)" >> "$GITHUB_OUTPUT"


      - name: Create release
        uses: softprops/action-gh-release@v2
        with:
          name: SCOW ${{ startsWith(github.ref_name, 'ai-') && format('AI Beta {0}', github.ref_name) || github.ref_name }}
          body_path: ${{ !startsWith(github.ref_name, 'ai-') && format('changelogs/{0}.md', github.ref_name) || null }}
          generate_release_notes: ${{ startsWith(github.ref_name, 'ai-') }}
          prerelease: ${{ startsWith(github.ref_name, 'ai-') }}
          files: |
            release/scow-cli/cli-x64
            release/scow-cli/cli-arm64
            ${{ steps.pack-scow-api.outputs.scow_api_file }}


      - name: Send Notification Request
        run: |
          curl -X POST ${{ secrets.RELEASE_SERVICE_ADDRESS }}/version/success \
          -H "Content-Type: application/json" \
          -H "Authorization: Bearer ${{ secrets.RELEASE_API_KEY }}" \
          -d '{
            "repo": "private-scow"
          }'
