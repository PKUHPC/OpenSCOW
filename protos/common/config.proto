/**
 * Copyright (c) 2022 Peking University and Peking University Institute for Computing and Digital Economy
 * SCOW is licensed under Mulan PSL v2.
 * You can use this software according to the terms and conditions of the Mulan PSL v2.
 * You may obtain a copy of Mulan PSL v2 at:
 *          http://license.coscl.org.cn/MulanPSL2
 * THIS SOFTWARE IS PROVIDED ON AN "AS IS" BASIS, WITHOUT WARRANTIES OF ANY KIND,
 * EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO NON-INFRINGEMENT,
 * MERCHANTABILITY OR FIT FOR A PARTICULAR PURPOSE.
 * See the Mulan PSL v2 for more details.
 */

syntax = "proto3";

package scow.common;
import "common/i18n.proto";

message GetClusterConfigRequest {
  string cluster = 1;
}

message Partition {
  string name = 1;
  // mem: memory size in M
  uint64 mem_mb = 2;
  // cores: number of cores
  uint32 cores = 3;
  // gpus: number of gpu
  uint32 gpus = 4;
  // nodes: number of nodes
  uint32 nodes = 5;
  // list that stores qos. the list can be empty.
  repeated string qos = 6;
  // price item description
  optional string comment = 7;
}

message GetClusterConfigResponse {
  repeated Partition partitions = 1;
  string scheduler_name = 2;
}


message ClusterConfigSchemaProto {
  message ProxyGateway {
    // 代理网关节点监听URL
    string url = 1;
    // 是否自动配置nginx
    // default value is false
    optional bool auto_setup_nginx = 2;
  }
  message LoginNodeConfigSchemaProto {
    // 登录节点展示名
    I18nStringProtoType name = 1;
    // 集群的登录节点地址
    string address = 2;
  }
  message LoginNodeConfigs {
    repeated LoginNodeConfigSchemaProto login_node_configs_value = 1;
  }
  message LoginNodeAddresses {
    repeated string login_node_addresses_value = 1;
  }
  message LoginNodesProtoType {
    oneof value {
      LoginNodeConfigs login_node_configs = 1;
      // 集群的登录节点地址
      // default value = []
      LoginNodeAddresses login_node_addresses = 2;
    }
  }
  message LoginDesktopConfigSchemaProto {
    message Wm {
      // 名称
      string name = 1;
      // wm值
      string wm = 2;
    }
    // 是否启动登录节点上的桌面功能
    bool enabled = 1;
    repeated Wm wms = 2;
    // 每个登录节点上最多创建多少个桌面
    int32 max_desktops = 3;
    // 将创建的登录节点桌面信息的保存到什么位置。相对于用户的家目录
    string desktops_dir = 4;
  }
  message CrossClusterFileTransfer {
    // 是否开启跨集群传输功能
    // default value = false
    optional bool enabled = 1;
    // 跨集群传输文件的节点
    optional string transfer_node = 2;
  }
  message Hpc {
    // 集群在HPC中是否启用, 默认启用
    // default value = true
    optional bool enabled = 1;
  }
  message Ai {
    // 集群在AI中是否启用, 默认不启用
    // default value = false
    optional bool enabled = 1;
  }
  enum K8sRuntime {
    DOCKER = 0;
    CONTAINERD = 1;
  }
  message Kubeconfig {
    // 集群 kubeconfig 文件路径
    string path = 1;
  }
  message K8s {
    // k8s 集群运行时, ai系统的镜像功能的命令取决于该值, 可选 docker 或者 containerd
    // default value = containerd
    optional K8sRuntime runtime = 1;
    // k8s 集群 kubeconfig 相关配置
    Kubeconfig kubeconfig = 2;
  }
  // 集群的显示名称
  common.I18nStringProtoType display_name = 1;
  // 集群使用的优先级, 数字越小越先展示
  // default value is Number.MAX_SAFE_INTEGER = 9007199254740991 2^53 − 1.
  optional int64 priority = 2;
  // 调度器适配器服务地址
  string adapter_url = 3;
  ProxyGateway proxy_gateway = 4;
  LoginNodesProtoType login_nodes = 5;
  optional LoginDesktopConfigSchemaProto login_desktop = 6;
  // TurboVNC的安装路径
  optional string turbo_vnc_path = 7;
  optional CrossClusterFileTransfer cross_cluster_file_transfer = 8;
  Hpc hpc = 9;
  Ai ai = 10;
  optional K8s k8s = 11;
}

message GetClusterConfigsInfoRequest {

}

message GetClusterConfigsInfoResponse {
  map<string, ClusterConfigSchemaProto> cluster_configs = 1;
}

service ConfigService {
  rpc GetClusterConfig(GetClusterConfigRequest) returns (GetClusterConfigResponse);

  // 获取 SCOW 部署的集群配置文件中的集群信息
  rpc GetClusterConfigsInfo(GetClusterConfigsInfoRequest) returns (GetClusterConfigsInfoResponse);
}
