/**
 * Copyright (c) 2022 Peking University and Peking University Institute for Computing and Digital Economy
 * SCOW is licensed under Mulan PSL v2.
 * You can use this software according to the terms and conditions of the Mulan PSL v2.
 * You may obtain a copy of Mulan PSL v2 at:
 *          http://license.coscl.org.cn/MulanPSL2
 * THIS SOFTWARE IS PROVIDED ON AN "AS IS" BASIS, WITHOUT WARRANTIES OF ANY KIND,
 * EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO NON-INFRINGEMENT,
 * MERCHANTABILITY OR FIT FOR A PARTICULAR PURPOSE.
 * See the Mulan PSL v2 for more details.
 */

syntax = "proto3";

package scow.portal;

message CopyRequest {
  string user_id = 1;
  string cluster = 2;
  string from_path = 3;
  string to_path = 4;
}

// NOT_FOUND: cluster is not found
// INTERNAL: cp command failed. details has stderr
message CopyResponse {
}

message CreateFileRequest {
  string user_id = 1;
  string cluster = 2;
  string path = 3;
}

// NOT_FOUND: cluster is not found
// ALREADY_EXISTS: file also exists
message CreateFileResponse {
}

message DeleteDirectoryRequest {
  string user_id = 1;
  string cluster = 2;
  string path = 3;
}

// NOT_FOUND: cluster is not found
message DeleteDirectoryResponse {
}

message DeleteFileRequest {
  string user_id = 1;
  string cluster = 2;
  string path = 3;
}

// NOT_FOUND: cluster is not found
message DeleteFileResponse {
}

message DownloadRequest {
  string user_id = 1;
  string cluster = 2;
  string path = 3;
}

message DownloadResponse {
  bytes chunk = 1;
}

message GetHomeDirectoryRequest {
  string user_id = 1;
  string cluster = 2;
}

// NOT_FOUND: cluster is not found
message GetHomeDirectoryResponse {
  string path = 1;
}

message ReadDirectoryRequest {
  string user_id = 1;
  string cluster = 2;
  string path = 3;
  // update_access_time 用于指示是否需要更新目录下全部文件的访问时间戳，主要在 SCOW 文件传输功能中使用
  // 为 true 时表示需要更新文件的访问时间戳，从而确保文件的访问时间与传输时间同步
  // 为 false 时表示不需要更新文件的访问时间戳
  optional bool update_access_time = 4;
}

message FileInfo {

  enum FileType {
    FILE = 0;
    DIR = 1;
  }

  string name = 1;
  FileType type = 2;
  string mtime = 3;
  uint32 mode = 4;
  uint64 size = 5;
}

// PERMISSION_DENIED: directory is not accessible
// INVALID_ARGUMENT: path is not directory or not exists
message ReadDirectoryResponse {
  repeated FileInfo results = 1;
}

message MoveRequest {
  string user_id = 1;
  string cluster = 2;
  string from_path = 3;
  string to_path = 4;
}

// INTERNAL: rename failed. details has error
message MoveResponse {
}

message MakeDirectoryRequest {
  string user_id = 1;
  string cluster = 2;
  string path = 3;
}

// NOT_FOUND: cluster not found
// ALREADY_EXISTS: directory already found
message MakeDirectoryResponse {
}

message UploadRequest {

  message Info {
    string user_id = 1;
    string cluster = 2;
    string path = 3;
  }

  oneof message {
    // only the first message has info
    Info info = 1;
    bytes chunk = 2;
  };
}

message UploadResponse {
  uint64 written_bytes = 1;
}

message GetFileMetadataRequest {
  string user_id = 1;
  string cluster = 2;
  string path = 3;
}

message GetFileMetadataResponse {
  uint32 size = 1;
  string type = 2;
}

message ExistsRequest {
  string user_id = 1;
  string cluster = 2;
  string path = 3;
}

message ExistsResponse {
  bool exists = 1;
}

message StartFileTransferRequest {
  string from_cluster = 1;
  string to_cluster = 2;
  string user_id = 3;
  string from_path = 4;
  string to_path = 5;
}

message StartFileTransferResponse {

}

message QueryFileTransferRequest {
  string cluster = 1;
  string user_id = 2;
}

message TransferInfo {
  string to_cluster = 1;
  string file_path = 2;
  uint64 transfer_size_kb = 3; // 单位为KB，B：Byte
  uint32 progress = 4;
  float speed_k_bps = 5;
  uint64 remaining_time_seconds = 6;
}

message QueryFileTransferResponse {
  repeated TransferInfo transfer_infos = 1;
}

message TerminateFileTransferRequest {
  string from_cluster = 1;
  string to_cluster = 2;
  string user_id = 3;
  string from_path = 4;
}

message TerminateFileTransferResponse {

}

message CheckTransferKeyRequest {
  string from_cluster = 1;
  string to_cluster = 2;
  string user_id = 3;
}

message CheckTransferKeyResponse {

}

service FileService {
  rpc Copy(CopyRequest) returns (CopyResponse);
  rpc CreateFile(CreateFileRequest) returns (CreateFileResponse);
  rpc DeleteDirectory(DeleteDirectoryRequest) returns (DeleteDirectoryResponse);
  rpc DeleteFile(DeleteFileRequest) returns (DeleteFileResponse);
  rpc Download(DownloadRequest) returns (stream DownloadResponse);
  rpc GetHomeDirectory(GetHomeDirectoryRequest)
      returns (GetHomeDirectoryResponse);
  rpc ReadDirectory(ReadDirectoryRequest) returns (ReadDirectoryResponse);

  rpc Move(MoveRequest) returns (MoveResponse);

  rpc MakeDirectory(MakeDirectoryRequest) returns (MakeDirectoryResponse);

  rpc Upload(stream UploadRequest) returns (UploadResponse);

  rpc GetFileMetadata(GetFileMetadataRequest) returns (GetFileMetadataResponse);

  rpc Exists(ExistsRequest) returns (ExistsResponse);

  rpc StartFileTransfer(StartFileTransferRequest) returns (StartFileTransferResponse);

  rpc QueryFileTransfer(QueryFileTransferRequest) returns (QueryFileTransferResponse);

  rpc TerminateFileTransfer(TerminateFileTransferRequest) returns (TerminateFileTransferResponse);

  rpc CheckTransferKey(CheckTransferKeyRequest) returns (CheckTransferKeyResponse);
}
