/**
   * Copyright (c) 2022 Peking University and Peking University Institute for Computing and Digital Economy
   * SCOW is licensed under Mulan PSL v2.
   * You can use this software according to the terms and conditions of the Mulan PSL v2.
   * You may obtain a copy of Mulan PSL v2 at:
   *          http://license.coscl.org.cn/MulanPSL2
   * THIS SOFTWARE IS PROVIDED ON AN "AS IS" BASIS, WITHOUT WARRANTIES OF ANY KIND,
   * EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO NON-INFRINGEMENT,
   * MERCHANTABILITY OR FIT FOR A PARTICULAR PURPOSE.
   * See the Mulan PSL v2 for more details.
*/

syntax = "proto3";

package scow.portal;

import "google/protobuf/timestamp.proto";

message ConnectToAppRequest {
  string user_id = 1;
  string cluster = 2;
  string session_id = 3;
}

message WebAppProps {
  string method = 1;
  string path = 2;
  map<string, string> query = 3;
  map<string, string> form_data = 4;
  enum ProxyType {
    RELATIVE = 0;
    ABSOLUTE = 1;
  }
  ProxyType proxy_type = 5;
  map<string, string> custom_form_data = 6;
}

message VncAppProps {}

// NOT_FOUND: session id not found
// UNAVAILABLE: the session cannot be connected
message ConnectToAppResponse {
  string host = 1;
  uint32 port = 2;
  string password = 3;
  oneof app_props {
    WebAppProps web = 4;
    VncAppProps vnc = 5;
  }
}

message CreateAppSessionRequest {
  string user_id = 1;
  string cluster = 2;
  string app_id = 3;
  string account = 4;
  optional string partition = 5;
  optional string qos = 6;
  uint32 core_count = 7;
  uint32 max_time = 8;
  // the base path before /${proxyType}/{compute node ip}/{port}
  // for SCOW, this is ${BASE_PATH}/api/proxy
  string proxy_base_path = 9;
  map<string, string> custom_attributes = 10;
}

// NOT_FOUND: app is not found
// INTERNAL: SBATCH failed, details has output
// INVALID_ARGUMENT: the custom form atrributes is invalid
message CreateAppSessionResponse {
  uint32 job_id = 1;
  string session_id = 2;
}

message ListAppSessionsRequest {
  string user_id = 1;
  string cluster = 2;
}

message AppSession {
  string session_id = 1;
  uint32 job_id = 2;
  google.protobuf.Timestamp submit_time = 3;
  string app_id = 4;
  string state = 5;
  string data_path = 6;
  string running_time = 7;
  string time_limit = 8;
  optional string reason = 9;

  optional string host = 10;
  optional uint32 port = 11;
}

message ListAppSessionsResponse {
  repeated AppSession sessions = 1;
}

message GetAppMetadataRequest {
  string app_id = 1;
}

message SelectOption {
  string value = 1;
  string label = 2;
}

message AppCustomAttribute {
  enum AttributeType {
    NUMBER = 0;
    TEXT = 1;
    SELECT = 2;
  }
  AttributeType type = 1;
  string label = 2;
  string name = 3;
  repeated SelectOption options = 4;
  bool required =5;
  oneof default_input {
    string text = 6;
    uint32 number = 7;
  }
  optional string placeholder = 8;
}

message GetAppMetadataResponse {
  string app_name = 1;
  repeated AppCustomAttribute attributes = 2;
}

message ListAvailableAppsRequest {}

message App {
  string id = 1;
  string name = 2;
}

message ListAvailableAppsResponse {
  repeated App apps = 1;
}

message SubmissionInfo {
  string user_id = 1;
  string cluster = 2;
  string app_id = 3;
  string app_name =4;
  string account = 5;
  optional string partition = 6;
  optional string qos = 7;
  uint32 core_count = 8;
  uint32 max_time = 9;
  google.protobuf.Timestamp submit_time = 10;
  map<string, string> custom_attributes = 11;
}

message GetAppLastSubmissionRequest {
  string user_id = 1;
  string cluster = 2;
  string app_id = 3;
}

message GetAppLastSubmissionResponse {
  optional SubmissionInfo last_submission_info = 1;
}

service AppService {
  rpc ConnectToApp(ConnectToAppRequest) returns (ConnectToAppResponse);

  rpc CreateAppSession(CreateAppSessionRequest) returns (CreateAppSessionResponse);

  rpc ListAppSessions(ListAppSessionsRequest) returns (ListAppSessionsResponse);

  rpc GetAppMetadata(GetAppMetadataRequest) returns (GetAppMetadataResponse);

  rpc ListAvailableApps(ListAvailableAppsRequest) returns (ListAvailableAppsResponse);

  rpc GetAppLastSubmission(GetAppLastSubmissionRequest) returns (GetAppLastSubmissionResponse);
}
