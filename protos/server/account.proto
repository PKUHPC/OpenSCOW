/**
 * Copyright (c) 2022 Peking University and Peking University Institute for Computing and Digital Economy
 * SCOW is licensed under Mulan PSL v2.
 * You can use this software according to the terms and conditions of the Mulan PSL v2.
 * You may obtain a copy of Mulan PSL v2 at:
 *          http://license.coscl.org.cn/MulanPSL2
 * THIS SOFTWARE IS PROVIDED ON AN "AS IS" BASIS, WITHOUT WARRANTIES OF ANY KIND,
 * EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO NON-INFRINGEMENT,
 * MERCHANTABILITY OR FIT FOR A PARTICULAR PURPOSE.
 * See the Mulan PSL v2 for more details.
 */

syntax = "proto3";

package scow.server;

import "common/money.proto";
import "google/protobuf/timestamp.proto";

message BlockAccountRequest {
  string tenant_name = 1;
  string account_name = 2;
}

// NOT_FOUND: account is not found.
message BlockAccountResponse {
  enum Result {
    OK = 0;
    ALREADY_BLOCKED = 1;
    WHITELISTED = 2;
  }
  Result result = 1;
}

message UnblockAccountRequest {
  string tenant_name = 1;
  string account_name = 2;
}

// NOT_FOUND: account is not found.
message UnblockAccountResponse {
  bool executed = 1;
}

message GetWhitelistedAccountsRequest {
  string tenant_name = 1;
}

message WhitelistedAccount {
  string account_name = 1;
  string owner_id = 2;
  string owner_name = 3;
  google.protobuf.Timestamp add_time = 4;
  string operator_id = 5;
  string comment = 6;
  common.Money balance = 7;
}

message GetWhitelistedAccountsResponse {
  repeated WhitelistedAccount accounts = 1;
}

message WhitelistAccountRequest {
  string tenant_name = 1;
  string account_name = 2;
  string operator_id = 3;
  string comment = 4;
}

// NOT_FOUND: account is not found.
message WhitelistAccountResponse {
  bool executed = 1;
}

message DewhitelistAccountRequest {
  string tenant_name = 1;
  string account_name = 2;
}

// NOT_FOUND: account is not found.
message DewhitelistAccountResponse {
  bool executed = 1;
}

message CreateAccountRequest {
  string tenant_name = 1;
  string account_name = 2;
  string owner_id = 3;
  optional string comment = 4;
}

// ALREADY_EXISTS: Account already exists.
// NOT_FOUND: owner user doesn't exist
message CreateAccountResponse {
}

message GetAccountsRequest {
  optional string tenant_name = 1;
  // returns all accounts if not set
  optional string account_name = 2;
}

message Account {
  enum AccountState {
    // 未封锁或未冻结，解封或激活时
    NORMAL = 0;
    // 账户被手动冻结
    FROZEN = 1;
    // 账户被上级手动封锁
    BLOCKED_BY_ADMIN = 2;
  }
  // 页面展示的账户状态
  enum DisplayedAccountState {
    // when in whitelist but state != frozen
    // or
    // when not in whitelist and state = normal and balance > block_threshold
    DISPLAYED_NORMAL = 0;
    // when state = frozen
    DISPLAYED_FROZEN = 1;
    // when state = blocked_by_admin and not in whitelist
    DISPLAYED_BLOCKED = 2;
    // when state = normal
    // and not in whitelist
    // and balance <= blcok_threshold
    DISPLAYED_BELOW_BLOCK_THRESHOLD = 3;
  }
  string tenant_name = 1;
  string account_name = 2;
  uint64 user_count = 3;
  // 为true时: blocked_in_cluster=true,账户不可以在集群中使用
  // 为false时: blocked_in_cluster=false,账户可以在集群中使用
  bool blocked = 4;
  string owner_id = 5;
  string owner_name = 6;
  string comment = 7;
  common.Money balance = 8;
  common.Money block_threshold_amount = 9;
  common.Money default_block_threshold_amount = 10;
  AccountState state = 11;
  optional bool is_in_whitelist = 12;
  DisplayedAccountState displayed_state = 13;
}

message GetAccountsResponse {
  repeated Account results = 1;
}

message SetBlockThresholdRequest {
  string account_name = 1;
  common.Money block_threshold_amount = 2;
}

message SetBlockThresholdResponse {

}

service AccountService {

  rpc CreateAccount(CreateAccountRequest) returns (CreateAccountResponse);
  rpc GetAccounts(GetAccountsRequest) returns (GetAccountsResponse);

  rpc BlockAccount(BlockAccountRequest) returns (BlockAccountResponse);
  rpc UnblockAccount(UnblockAccountRequest) returns (UnblockAccountResponse);

  rpc GetWhitelistedAccounts(GetWhitelistedAccountsRequest)
      returns (GetWhitelistedAccountsResponse);
  rpc WhitelistAccount(WhitelistAccountRequest) returns (WhitelistAccountResponse);
  rpc DewhitelistAccount(DewhitelistAccountRequest)
      returns (DewhitelistAccountResponse);

  rpc SetBlockThreshold(SetBlockThresholdRequest) returns (SetBlockThresholdResponse);
}
