/**
 * Copyright (c) 2022 Peking University and Peking University Institute for Computing and Digital Economy
 * SCOW is licensed under Mulan PSL v2.
 * You can use this software according to the terms and conditions of the Mulan PSL v2.
 * You may obtain a copy of Mulan PSL v2 at:
 *          http://license.coscl.org.cn/MulanPSL2
 * THIS SOFTWARE IS PROVIDED ON AN "AS IS" BASIS, WITHOUT WARRANTIES OF ANY KIND,
 * EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO NON-INFRINGEMENT,
 * MERCHANTABILITY OR FIT FOR A PARTICULAR PURPOSE.
 * See the Mulan PSL v2 for more details.
 */

syntax = "proto3";

package scow.server;

import "google/protobuf/timestamp.proto";

message GetAvailablePartitionsRequest {
  option deprecated = true;
  string account_name = 1;
  string user_id = 2;
}

message Partition {
  option deprecated = true;
  string name = 1;
  // mem: memory size in M
  uint64 mem_mb = 2;
  // cores: number of cores
  uint32 cores = 3;
  // gpus: number of gpu
  uint32 gpus = 4;
  // nodes: number of nodes
  uint32 nodes = 5;
  // list that stores qos. the list can be empty.
  repeated string qos = 6;
  // price item description
  optional string comment = 7;
}

message ClusterPartitions {
  option deprecated = true;
  string cluster = 1;
  repeated Partition partitions = 2;
}

message GetAvailablePartitionsResponse {
  option deprecated = true;
  repeated ClusterPartitions cluster_partitions = 1;
}

message GetAvailablePartitionsForClusterRequest {
  option deprecated = true;
  string cluster = 1;
  string account_name = 2;
  string user_id = 3;
}

message GetAvailablePartitionsForClusterResponse {
  option deprecated = true;
  repeated Partition partitions = 1;
}

// get current clusters info from database
message GetClustersRuntimeInfoRequest {
}

enum ClusterActivationStatus {
  // status when cluster is activated
  ACTIVATED = 0;
  // status when cluster is deactivated
  DEACTIVATED = 1;
}

message ClusterRuntimeInfo {
  message LastActivationOperation {
    optional string operator_id = 1;
    optional string deactivation_comment = 2;
  }
  string cluster_id = 1;
  ClusterActivationStatus activation_status = 14;
  LastActivationOperation last_activation_operation = 15;
  google.protobuf.Timestamp update_time = 16;
}

message GetClustersRuntimeInfoResponse {
  repeated ClusterRuntimeInfo results = 1;
}

message ActivateClusterRequest {
  string cluster_id = 1;
  string operator_id = 2;
}

// NOT_FOUND: cluster is not found
// FAILED_PRECONDITION: scheduler adapter can not be accessed
message ActivateClusterResponse {
  bool executed = 1;
}

message DeactivateClusterRequest {
  string cluster_id = 1;
  string operator_id = 2;
  optional string deactivation_comment = 3;
}

// NOT_FOUND: cluster is not found
message DeactivateClusterResponse {
  bool executed = 1;
}

service ConfigService {

  /**
   * Depracated Notice
   * This API funcition GetAvailablePartitions has been deprecated.
   * Use the new API function GetAvailablePartitionsForCluster instead.
   */
  rpc GetAvailablePartitions(GetAvailablePartitionsRequest) returns (GetAvailablePartitionsResponse) {
    option deprecated = true;
  };

  /**
   * Depracated Notice
   * This API funcition GetAvailablePartitionsForCluster has been deprecated.
   * Use the new API function GetAvailablePartitionsForCluster From ../common/config.proto instead.
   */
  rpc GetAvailablePartitionsForCluster(GetAvailablePartitionsForClusterRequest)
    returns (GetAvailablePartitionsForClusterResponse) {
      option deprecated = true;
    };

  rpc GetClustersRuntimeInfo(GetClustersRuntimeInfoRequest) returns (GetClustersRuntimeInfoResponse);

  rpc ActivateCluster(ActivateClusterRequest) returns (ActivateClusterResponse);

  rpc DeactivateCluster(DeactivateClusterRequest) returns (DeactivateClusterResponse);
}
