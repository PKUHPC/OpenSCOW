/**
 * Copyright (c) 2022 Peking University and Peking University Institute for Computing and Digital Economy
 * SCOW is licensed under Mulan PSL v2.
 * You can use this software according to the terms and conditions of the Mulan PSL v2.
 * You may obtain a copy of Mulan PSL v2 at:
 *          http://license.coscl.org.cn/MulanPSL2
 * THIS SOFTWARE IS PROVIDED ON AN "AS IS" BASIS, WITHOUT WARRANTIES OF ANY KIND,
 * EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO NON-INFRINGEMENT,
 * MERCHANTABILITY OR FIT FOR A PARTICULAR PURPOSE.
 * See the Mulan PSL v2 for more details.
 */

syntax = "proto3";
package scow.server;

import "google/protobuf/timestamp.proto";

import "common/money.proto";

message PayRequest {
  common.Money amount = 1;
  string operator_id = 2;
  string tenant_name = 3;
  // if account_name is not set, pay the tenant
  optional string account_name = 4;
  string type = 5;
  string comment = 6;
  string ip_address = 7;
}

message PayResponse {
  common.Money previous_balance = 1;
  common.Money current_balance = 2;
}

message GetBalanceRequest {
  string tenant_name = 1;
  optional string account_name = 2;
}

message GetBalanceResponse {
  common.Money balance = 1;
}

message ChargeRequest {
  string tenant_name = 1;
  // if account_name is not set, pay the tenant
  optional string account_name = 2;
  common.Money amount = 3;
  string type = 4;
  string comment = 5;
}

message ChargeResponse {
  common.Money previous_balance = 1;
  common.Money current_balance = 2;
}

message ChargeRecord {
  uint64 index = 1;
  string tenant_name = 2;
  optional string account_name = 3;
  google.protobuf.Timestamp time = 4;
  string type = 5;
  common.Money amount = 6;
  string comment = 7;
}

// 充值记录及消费记录请求target
message AccountOfTenantTarget {
  string account_name = 1;
  string tenant_name = 2;
}
message AccountsOfTenantTarget {
  string tenant_name = 1;
}
message TenantTarget {
  string tenant_name = 1;
}
message AllTenantsTarget {
}
message AccountsOfAllTenantsTarget {
}

message GetChargeRecordsRequest {
  option deprecated = true;
  google.protobuf.Timestamp start_time = 1;
  google.protobuf.Timestamp end_time = 2;
  optional string type = 3;
  oneof target {
    // 返回这个租户（tenantName）下这个账户（accountName）的消费记录
    AccountOfTenantTarget account_of_tenant = 4;
    // 返回这个租户（tenantName）下所有账户的消费记录
    AccountsOfTenantTarget accounts_of_tenant = 5;
    // 返回所有租户下所有账户的消费记录
    AccountsOfAllTenantsTarget accounts_of_all_tenants = 6;
    // 返回这个租户（tenantName）的租户消费记录
    TenantTarget tenant = 7;
    // 返回所有租户的租户消费记录
    AllTenantsTarget all_tenants = 8;
  }
}

message GetChargeRecordsResponse {
  option deprecated = true;
  repeated ChargeRecord results = 1;
  optional common.Money total = 2;
}

// get limited charge records by server-side pagination' page info
message GetPaginatedChargeRecordsRequest {
  google.protobuf.Timestamp start_time = 1;
  google.protobuf.Timestamp end_time = 2;
  optional string type = 3;
  oneof target {
    // 返回这个租户（tenantName）下这个账户（accountName）的消费记录
    AccountOfTenantTarget account_of_tenant = 4;
    // 返回这个租户（tenantName）下所有账户的消费记录
    AccountsOfTenantTarget accounts_of_tenant = 5;
    // 返回所有租户下所有账户的消费记录
    AccountsOfAllTenantsTarget accounts_of_all_tenants = 6;
    // 返回这个租户（tenantName）的租户消费记录
    TenantTarget tenant = 7;
    // 返回所有租户的租户消费记录
    AllTenantsTarget all_tenants = 8;
  }
  // if undefined, page is 1
  optional uint32 page = 9;
  // if undefined or 0, page_size is 10
  optional uint64 page_size = 10;
}

message GetPaginatedChargeRecordsResponse {
  repeated ChargeRecord results = 1;
}

// get total charge records count and amount
message GetChargeRecordsTotalCountRequest {
  google.protobuf.Timestamp start_time = 1;
  google.protobuf.Timestamp end_time = 2;
  optional string type = 3;
  oneof target {
    // 返回这个租户（tenantName）下这个账户（accountName）的消费记录
    AccountOfTenantTarget account_of_tenant = 4;
    // 返回这个租户（tenantName）下所有账户的消费记录
    AccountsOfTenantTarget accounts_of_tenant = 5;
    // 返回所有租户下所有账户的消费记录
    AccountsOfAllTenantsTarget accounts_of_all_tenants = 6;
    // 返回这个租户（tenantName）的租户消费记录
    TenantTarget tenant = 7;
    // 返回所有租户的租户消费记录
    AllTenantsTarget all_tenants = 8;
  }
}

message GetChargeRecordsTotalCountResponse {
  optional common.Money total_amount = 1;
  uint64 total_count = 2;
}

message PaymentRecord {
  uint64 index = 1;
  string tenant_name = 2;
  optional string account_name = 3;
  google.protobuf.Timestamp time = 4;
  string type = 5;
  common.Money amount = 6;
  string comment = 7;
  string ip_address = 8;
  string operator_id = 9;
}

message GetPaymentRecordsRequest {
  google.protobuf.Timestamp start_time = 1;
  google.protobuf.Timestamp end_time = 2;

  oneof target {
    // 返回这个租户（tenantName）下这个账户（accountName）的充值记录
    AccountOfTenantTarget account_of_tenant = 3;
    // 返回这个租户（tenantName）下所有账户的充值记录
    AccountsOfTenantTarget accounts_of_tenant = 4;
    // 返回这个租户（tenantName）的充值记录
    TenantTarget tenant = 5;
    // 返回所有租户充值记录
    AllTenantsTarget all_tenants = 6;
  }
}

message GetPaymentRecordsResponse {
  repeated PaymentRecord results = 1;
  optional common.Money total = 2;
}

message GetAllPayTypesRequest {
}

message GetAllPayTypesResponse {
  repeated string types = 1;
}

service ChargingService {
  // NotFound: account is not found.
  rpc Pay(PayRequest) returns (PayResponse);

  rpc GetAllPayTypes(GetAllPayTypesRequest) returns (GetAllPayTypesResponse);

  // NotFound: account is not found.
  rpc Charge(ChargeRequest) returns (ChargeResponse);

  // NotFound: account or tenant is not found.
  rpc GetBalance(GetBalanceRequest) returns (GetBalanceResponse);

  rpc GetPaymentRecords(GetPaymentRecordsRequest)
      returns (GetPaymentRecordsResponse);

  /**
   * Deprecated Notice
   * This API function GetChargeRecords has been deprecated.
   * Use the new API function GetPaginatedChargeRecords and  GetChargeRecordsTotalCount instead.
   */
  rpc GetChargeRecords(GetChargeRecordsRequest) returns (GetChargeRecordsResponse) {
    option deprecated = true;
  };

  rpc GetPaginatedChargeRecords(GetPaginatedChargeRecordsRequest) returns (GetPaginatedChargeRecordsResponse);

  rpc GetChargeRecordsTotalCount(GetChargeRecordsTotalCountRequest) returns (GetChargeRecordsTotalCountResponse);
}
