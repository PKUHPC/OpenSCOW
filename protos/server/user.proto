/**
 * Copyright (c) 2022 Peking University and Peking University Institute for Computing and Digital Economy
 * SCOW is licensed under Mulan PSL v2.
 * You can use this software according to the terms and conditions of the Mulan PSL v2.
 * You may obtain a copy of Mulan PSL v2 at:
 *          http://license.coscl.org.cn/MulanPSL2
 * THIS SOFTWARE IS PROVIDED ON AN "AS IS" BASIS, WITHOUT WARRANTIES OF ANY KIND,
 * EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO NON-INFRINGEMENT,
 * MERCHANTABILITY OR FIT FOR A PARTICULAR PURPOSE.
 * See the Mulan PSL v2 for more details.
 */

syntax = "proto3";

package scow.server;

import "common/money.proto";
import "google/protobuf/timestamp.proto";

import "google/type/date.proto";

enum UserStatus {
  UNBLOCKED = 0;
  BLOCKED = 1;
}

message GetUserStatusRequest {
  string tenant_name = 1;
  string user_id = 2;
}

message AccountStatus {
  UserStatus user_status = 1;
  bool account_blocked = 2;
  optional common.Money job_charge_limit = 3;
  optional common.Money used_job_charge = 4;
  common.Money balance = 5;
}

message GetUserStatusResponse {
  // account and its status
  map<string, AccountStatus> account_statuses = 1;
  // cluster and quota
  map<string, uint64> storage_quotas = 2;
}

message QueryUsedStorageQuotaRequest {
  string tenant_name = 1;
  string user_id = 2;
  string cluster = 3;
}

message QueryUsedStorageQuotaResponse {
  uint64 used = 1;
}

message GetAccountUsersRequest {
  string tenant_name = 1;
  string account_name = 2;
}

message AccountUserInfo {
  enum UserStateInAccount {
    // 用户未被账户管理员或拥有者手动封锁，或用户被手动解封
    NORMAL = 0;
    // 用户被账户管理员或拥有者手动封锁
    BLOCKED_BY_ADMIN = 1;
  }
  // 页面展示的用户在账户中的状态
  enum DisplayedUserState {
    // 正常: 用户未被封锁，且用户已用额度<用户限额，在集群中状态为正常
    DISPLAYED_NORMAL = 0;
    // 限额：用户未被封锁，但用户已用额度>=用户限额，在集群中状态为封锁
    DISPLAYED_QUOTA_EXCEEDED = 1;
    // 封锁：用户已被账户管理员或账户拥有者封锁，在集群中状态为封锁
    DISPLAYED_BLOCKED = 2;
  }
  string user_id = 1;
  string name = 2;
  string email = 3;
  // 账户下用户在集群中的状态
  // BLOCKED: 账户下的用户在集群中为封锁状态
  // UNBLOCKED：账户下的用户在集群中为未封锁状态
  UserStatus status = 4;
  UserRole role = 5;
  // cluster and quota
  map<string, uint64> storage_quotas = 6;
  optional common.Money job_charge_limit = 7;
  optional common.Money used_job_charge_limit = 8;
  UserStateInAccount user_state_in_account = 9;
  DisplayedUserState displayed_user_state = 10;
}

message GetAccountUsersResponse {
  repeated AccountUserInfo results = 1;
}

message QueryIsUserInAccountRequest {
  string tenant_name = 1;
  string user_id = 2;
  string account_name = 3;
}

message QueryIsUserInAccountResponse {
  bool result = 1;
}

message UnblockUserInAccountRequest {
  string tenant_name = 1;
  string user_id = 2;
  string account_name = 3;
}

// NOT_FOUND: user_id or account_name is not found.
// FAILED_PRECONDITION: user is already unblocked
message UnblockUserInAccountResponse {
}

message BlockUserInAccountRequest {
  string tenant_name = 1;
  string user_id = 2;
  string account_name = 3;
}

// NOT_FOUND: user_id or account_name is not found.
// FAILED_PRECONDITION: user is already blocked
message BlockUserInAccountResponse {
}

message RemoveUserFromAccountRequest {
  string tenant_name = 1;
  string user_id = 2;
  string account_name = 3;
}

// NOT_FOUND: user_id is not found.
// OUT_OF_RANGE: user is the owner of the account
message RemoveUserFromAccountResponse {
}

message AddUserToAccountRequest {
  string tenant_name = 1;
  string user_id = 2;
  string account_name = 3;
}

// ALREADY_EXISTS: user already in the account
// NOT_FOUND: account is not found.
message AddUserToAccountResponse {
}

message SetAsAdminRequest {
  string tenant_name = 1;
  string user_id = 2;
  string account_name = 3;
}

// FAILED_PRECONDITION: the user is already admin
// NOT_FOUND: user is not found.
message SetAsAdminResponse {
}

message UnsetAdminRequest {
  string tenant_name = 1;
  string user_id = 2;
  string account_name = 3;
}

// FAILED_PRECONDITION: the user is already not admin
// NOT_FOUND: user is not found.
message UnsetAdminResponse {
}

message CreateUserRequest {
  string tenant_name = 1;
  string identity_id = 2;
  string name = 3;
  string email = 4;
  string password = 5;
  optional string unicom_id = 6;
}

// ALREADY_EXISTS: user with id already exists
message CreateUserResponse {
  // The id of the new user
  // Must be monotonically increasing
  uint32 id = 1;
  bool created_in_auth = 2;
}

message AddUserRequest {
  string tenant_name = 1;
  string identity_id = 2;
  string name = 3;
  string email = 4;
}

message AddUserResponse {
  uint32 id = 1;
}

message DeleteUserRequest {
  string tenant_name = 1;
  string user_id = 2;
}

// FAILED_PRECONDITION: the user is an owner of an account.
// NOT_FOUND: user is not found
message DeleteUserResponse {
}

message GetNameRequest {
  string tenant_name = 1;
  string user_id = 2;
}

// NOT_FOUND: user is not found
message GetNameResponse {
  string name = 1;
}

message GetUsersRequest {
  string tenant_name = 1;
}

message User {
  string tenant_name = 1;
  string user_id = 2;
  string name = 3;
  string email = 4;
  google.protobuf.Timestamp create_time = 5;
  repeated AccountAffiliation account_affiliations = 6;
  repeated PlatformRole platform_roles = 7;
  repeated TenantRole tenant_roles = 8;
}

message GetUserInfoRequest {
  string user_id = 1;
}

enum UserRole {
  USER = 0;
  ADMIN = 1;
  OWNER = 2;
}

message AccountAffiliation {
  string account_name = 1;
  UserRole role = 2;
}

enum PlatformRole {
  PLATFORM_ADMIN = 0;
  PLATFORM_FINANCE = 1;
}

enum TenantRole {
  TENANT_ADMIN = 0;
  TENANT_FINANCE = 1;
}

message GetUserInfoResponse {
  repeated AccountAffiliation affiliations = 1;
  repeated PlatformRole platform_roles = 2;
  repeated TenantRole tenant_roles = 3;
  string name = 4;
  string tenant_name = 5;
  string email = 6;
  google.protobuf.Timestamp create_time = 7;

}

message GetUsersResponse {
  repeated User users = 1;
}

message PlatformUserInfo {
  string user_id = 1;
  string name = 2;
  repeated string available_accounts = 3;
  string tenant_name = 4;
  google.protobuf.Timestamp create_time = 5;
  repeated PlatformRole platform_roles = 6;
  string email = 7;
}

enum SortDirection {
  ASC = 0;
  DESC = 1;
}

message GetAllUsersRequest {
  // sort fields
  // for mis pageComponent AllUsersTable
  enum UsersSortField {
    USER_ID = 0;
    NAME = 1;
    CREATE_TIME = 2;
  }
  uint32 page = 1;
  optional uint64 page_size = 2;
  optional UsersSortField sort_field = 3;
  optional SortDirection sort_order = 4;
  optional string id_or_name = 5;
  optional PlatformRole platform_role = 6;
}

message GetAllUsersResponse {
  uint64 total_count = 1;
  repeated PlatformUserInfo platform_users = 2;
}

message GetUsersByIdsRequest {
  repeated string user_ids = 1;
}

message GetUsersByIdsResponse {

  message UserInfo {
    string user_id = 1;
    string user_name = 2;
  }

  repeated UserInfo users = 1;
}

message GetPlatformUsersCountsRequest {
  optional string id_or_name = 1;
}

message GetPlatformUsersCountsResponse {
  uint64 total_count = 1;
  uint64 total_admin_count = 2;
  uint64 total_finance_count = 3;
}

message SetPlatformRoleRequest {
  string user_id = 1;
  PlatformRole role_type = 2;
}

// FAILED_PRECONDITION: the user is already this role(role_type)
// NOT_FOUND: user is not found.
message SetPlatformRoleResponse {
}

message UnsetPlatformRoleRequest {
  string user_id = 1;
  PlatformRole role_type = 2;
}

// FAILED_PRECONDITION: the user is already not this role(role_type)
// NOT_FOUND: user is not found.
message UnsetPlatformRoleResponse {
}

message SetTenantRoleRequest {
  string user_id = 1;
  TenantRole role_type = 2;
}

// FAILED_PRECONDITION: the user is already this role(role_type)
// NOT_FOUND: user is not found.
message SetTenantRoleResponse {
}

message UnsetTenantRoleRequest {
  string user_id = 1;
  TenantRole role_type = 2;
}

// FAILED_PRECONDITION: the user is already not this role(role_type)
// NOT_FOUND: user is not found.
message UnsetTenantRoleResponse {
}

message CheckUserNameMatchRequest {
  string user_id = 1;
  string name = 2;
}

// NOT_FOUND: user is not found
message CheckUserNameMatchResponse {
  bool match = 1;
}

message ChangeEmailRequest {
  string user_id = 1;
  string new_email = 2;
}

message ChangeEmailResponse {
}


message GetNewUserCountRequest {
  google.protobuf.Timestamp start_time = 1;
  google.protobuf.Timestamp end_time = 2;
  // 以什么时区作为统计的基准，如果不传，默认为UTC
  // 可选时区根据mysql的时区确定，具体可参考：https://dev.mysql.com/doc/refman/8.0/en/time-zone-support.html
  optional string time_zone = 3;
}

message GetNewUserCountResponse {
  message DailyUserCount {
    google.type.Date date = 1;
    uint64 count = 2;
  }
  repeated DailyUserCount results = 1;
}

message ChangeTenantRequest {
  string user_id = 1;
  string tenant_name = 2;

}

// NOT_FOUND: user is not found.
// NOT_FOUND: tenant is not found.
// ALREADY_EXISTS: user is already in the tenant
// FAILED_PRECONDITION: user still maintains account relationship
message ChangeTenantResponse {

}

message CheckUnicomUserExistRequest {
  string unicom_user_id = 1;
}

message UserExisted {
  bool existed = 1;
  string user_id =2;
}

message UserNotExisted {
  bool existed = 1;
}

message CheckUnicomUserExistResponse {
  oneof target {
    UserExisted user_existed = 1;
    UserNotExisted user_not_existed = 2;
  }
}

service UserService {

  rpc GetUsers(GetUsersRequest) returns (GetUsersResponse);

  rpc GetUserInfo(GetUserInfoRequest) returns (GetUserInfoResponse);

  rpc GetAllUsers(GetAllUsersRequest) returns (GetAllUsersResponse);
  rpc GetPlatformUsersCounts(GetPlatformUsersCountsRequest) returns (GetPlatformUsersCountsResponse);

  rpc GetAccountUsers(GetAccountUsersRequest) returns (GetAccountUsersResponse);
  rpc QueryIsUserInAccount(QueryIsUserInAccountRequest)
      returns (QueryIsUserInAccountResponse);
  rpc GetUserStatus(GetUserStatusRequest) returns (GetUserStatusResponse);
  rpc QueryUsedStorageQuota(QueryUsedStorageQuotaRequest)
      returns (QueryUsedStorageQuotaResponse);

  rpc GetUsersByIds(GetUsersByIdsRequest) returns (GetUsersByIdsResponse);

  //新增用户，在数据库中增加用户，然后调用auth服务在ldap中增加该用户，
  //并将公钥插入用户的authorized_keys
  rpc CreateUser(CreateUserRequest) returns (CreateUserResponse);

  //仅在数据库中增加用户数据，用于结合自定义认证系统新增scow用户，
  //与createUser的区别在于不需要password，不调用auth服务，暂不将公钥插入用户authorized_keys
  rpc AddUser(AddUserRequest) returns (AddUserResponse);

  rpc DeleteUser(DeleteUserRequest) returns (DeleteUserResponse);
  rpc AddUserToAccount(AddUserToAccountRequest) returns (AddUserToAccountResponse);
  rpc RemoveUserFromAccount(RemoveUserFromAccountRequest)
      returns (RemoveUserFromAccountResponse);
  rpc BlockUserInAccount(BlockUserInAccountRequest)
      returns (BlockUserInAccountResponse);
  rpc UnblockUserInAccount(UnblockUserInAccountRequest)
      returns (UnblockUserInAccountResponse);
  rpc SetAsAdmin(SetAsAdminRequest) returns (SetAsAdminResponse);
  rpc UnsetAdmin(UnsetAdminRequest) returns (UnsetAdminResponse);
  rpc SetPlatformRole(SetPlatformRoleRequest) returns (SetPlatformRoleResponse);
  rpc UnsetPlatformRole(UnsetPlatformRoleRequest) returns (UnsetPlatformRoleResponse);
  rpc SetTenantRole(SetTenantRoleRequest) returns (SetTenantRoleResponse);
  rpc UnsetTenantRole(UnsetTenantRoleRequest) returns (UnsetTenantRoleResponse);

  rpc CheckUserNameMatch (CheckUserNameMatchRequest) returns (CheckUserNameMatchResponse);
  rpc ChangeEmail (ChangeEmailRequest) returns (ChangeEmailResponse);

  rpc GetNewUserCount(GetNewUserCountRequest) returns (GetNewUserCountResponse);

  rpc ChangeTenant(ChangeTenantRequest) returns (ChangeTenantResponse);
  rpc CheckUnicomUserExist(CheckUnicomUserExistRequest) returns (CheckUnicomUserExistResponse);
}
