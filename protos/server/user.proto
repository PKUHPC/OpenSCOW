/**
 * Copyright (c) 2022 Peking University and Peking University Institute for Computing and Digital Economy
 * SCOW is licensed under Mulan PSL v2.
 * You can use this software according to the terms and conditions of the Mulan PSL v2.
 * You may obtain a copy of Mulan PSL v2 at:
 *          http://license.coscl.org.cn/MulanPSL2
 * THIS SOFTWARE IS PROVIDED ON AN "AS IS" BASIS, WITHOUT WARRANTIES OF ANY KIND,
 * EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO NON-INFRINGEMENT,
 * MERCHANTABILITY OR FIT FOR A PARTICULAR PURPOSE.
 * See the Mulan PSL v2 for more details.
 */

syntax = "proto3";

package scow.server;

import "common/money.proto";
import "google/protobuf/timestamp.proto";

enum UserStatus {
  UNBLOCKED = 0;
  BLOCKED = 1;
}

message GetUserStatusRequest {
  string tenant_name = 1;
  string user_id = 2;
}

message AccountStatus {
  UserStatus user_status = 1;
  bool account_blocked = 2;
  optional common.Money job_charge_limit = 3;
  optional common.Money used_job_charge = 4;
  common.Money balance = 5;
}

message GetUserStatusResponse {
  // account and its status
  map<string, AccountStatus> account_statuses = 1;
  // cluster and quota
  map<string, uint64> storage_quotas = 2;
}

message QueryUsedStorageQuotaRequest {
  string tenant_name = 1;
  string user_id = 2;
  string cluster = 3;
}

message QueryUsedStorageQuotaResponse {
  uint64 used = 1;
}

message GetAccountUsersRequest {
  string tenant_name = 1;
  string account_name = 2;
}

message AccountUserInfo {
  string user_id = 1;
  string name = 2;
  UserStatus status = 3;
  UserRole role = 4;
  // cluster and quota
  map<string, uint64> storage_quotas = 5;
  optional common.Money job_charge_limit = 6;
  optional common.Money used_job_charge_limit = 7;
}

message GetAccountUsersResponse {
  repeated AccountUserInfo results = 1;
}

message QueryIsUserInAccountRequest {
  string tenant_name = 1;
  string user_id = 2;
  string account_name = 3;
}

message QueryIsUserInAccountResponse {
  bool result = 1;
}

message UnblockUserInAccountRequest {
  string tenant_name = 1;
  string user_id = 2;
  string account_name = 3;
}

// NOT_FOUND: user_id or account_name is not found.
// FAILED_PRECONDITION: user is already unblocked
message UnblockUserInAccountResponse {
}

message BlockUserInAccountRequest {
  string tenant_name = 1;
  string user_id = 2;
  string account_name = 3;
}

// NOT_FOUND: user_id or account_name is not found.
// FAILED_PRECONDITION: user is already blocked
message BlockUserInAccountResponse {
}

message RemoveUserFromAccountRequest {
  string tenant_name = 1;
  string user_id = 2;
  string account_name = 3;
}

// NOT_FOUND: user_id is not found.
// OUT_OF_RANGE: user is the owner of the account
message RemoveUserFromAccountResponse {
}

message AddUserToAccountRequest {
  string tenant_name = 1;
  string user_id = 2;
  string account_name = 3;
}

// ALREADY_EXISTS: user already in the account
// NOT_FOUND: account is not found.
message AddUserToAccountResponse {
}

message SetAsAdminRequest {
  string tenant_name = 1;
  string user_id = 2;
  string account_name = 3;
}

// FAILED_PRECONDITION: the user is already admin
// NOT_FOUND: user is not found.
message SetAsAdminResponse {
}

message UnsetAdminRequest {
  string tenant_name = 1;
  string user_id = 2;
  string account_name = 3;
}

// FAILED_PRECONDITION: the user is already not admin
// NOT_FOUND: user is not found.
message UnsetAdminResponse {
}

message CreateUserRequest {
  string tenant_name = 1;
  string identity_id = 2;
  string name = 3;
  string email = 4;
  string password = 5;
}

// ALREADY_EXISTS: user with id already exists
message CreateUserResponse {
  // The id of the new user
  // Must be monotonically increasing
  uint32 id = 1;
  bool created_in_auth = 2;
}

message DeleteUserRequest {
  string tenant_name = 1;
  string user_id = 2;
}

// FAILED_PRECONDITION: the user is an owner of an account.
// NOT_FOUND: user is not found
message DeleteUserResponse {
}

message GetNameRequest {
  string tenant_name = 1;
  string user_id = 2;
}

// NOT_FOUND: user is not found
message GetNameResponse {
  string name = 1;
}

message GetUsersRequest {
  string tenant_name = 1;
}

message User {
  string tenant_name = 1;
  string user_id = 2;
  string name = 3;
  string email = 4;
  google.protobuf.Timestamp create_time = 5;
  repeated AccountAffiliation account_affiliations = 6;
  repeated PlatformRole platform_roles = 7;
  repeated TenantRole tenant_roles = 8;
}

message GetUserInfoRequest {
  string user_id = 1;
}

enum UserRole {
  USER = 0;
  ADMIN = 1;
  OWNER = 2;
}

message AccountAffiliation {
  string account_name = 1;
  UserRole role = 2;
}

enum PlatformRole {
  PLATFORM_ADMIN = 0;
  PLATFORM_FINANCE = 1;
}

enum TenantRole {
  TENANT_ADMIN = 0;
  TENANT_FINANCE = 1;
}

message GetUserInfoResponse {
  repeated AccountAffiliation affiliations = 1;
  repeated PlatformRole platform_roles = 2;
  repeated TenantRole tenant_roles = 3;
  string name = 4;
  string tenant_name = 5;
}

message GetUsersResponse {
  repeated User users = 1;
}

message PlatformUserInfo {
  string user_id = 1;
  string name = 2;
  repeated string available_accounts = 3;
  string tenant_name = 4;
  google.protobuf.Timestamp create_time = 5;
  repeated PlatformRole platform_roles = 6;
}

message GetAllUsersRequest {
  uint32 page = 1;
  optional uint64 page_size = 2;
  optional string id_or_name = 3;
}

message GetAllUsersResponse {
  uint64 total_count = 1;
  repeated PlatformUserInfo platform_users = 2;
}

message SetPlatformRoleRequest {
  string user_id = 1;
  PlatformRole role_type = 2;
}

// FAILED_PRECONDITION: the user is already this role(role_type)
// NOT_FOUND: user is not found.
message SetPlatformRoleResponse {
}

message UnsetPlatformRoleRequest {
  string user_id = 1;
  PlatformRole role_type = 2;
}

// FAILED_PRECONDITION: the user is already not this role(role_type)
// NOT_FOUND: user is not found.
message UnsetPlatformRoleResponse {
}

message SetTenantRoleRequest {
  string user_id = 1;
  TenantRole role_type = 2;
}

// FAILED_PRECONDITION: the user is already this role(role_type)
// NOT_FOUND: user is not found.
message SetTenantRoleResponse {
}

message UnsetTenantRoleRequest {
  string user_id = 1;
  TenantRole role_type = 2;
}

// FAILED_PRECONDITION: the user is already not this role(role_type)
// NOT_FOUND: user is not found.
message UnsetTenantRoleResponse {
}

service UserService {

  rpc GetUsers(GetUsersRequest) returns (GetUsersResponse);

  rpc GetUserInfo(GetUserInfoRequest) returns (GetUserInfoResponse);

  rpc GetAllUsers(GetAllUsersRequest) returns (GetAllUsersResponse);

  rpc GetAccountUsers(GetAccountUsersRequest) returns (GetAccountUsersResponse);
  rpc QueryIsUserInAccount(QueryIsUserInAccountRequest)
      returns (QueryIsUserInAccountResponse);
  rpc GetUserStatus(GetUserStatusRequest) returns (GetUserStatusResponse);
  rpc QueryUsedStorageQuota(QueryUsedStorageQuotaRequest)
      returns (QueryUsedStorageQuotaResponse);
  rpc CreateUser(CreateUserRequest) returns (CreateUserResponse);
  rpc DeleteUser(DeleteUserRequest) returns (DeleteUserResponse);
  rpc AddUserToAccount(AddUserToAccountRequest) returns (AddUserToAccountResponse);
  rpc RemoveUserFromAccount(RemoveUserFromAccountRequest)
      returns (RemoveUserFromAccountResponse);
  rpc BlockUserInAccount(BlockUserInAccountRequest)
      returns (BlockUserInAccountResponse);
  rpc UnblockUserInAccount(UnblockUserInAccountRequest)
      returns (UnblockUserInAccountResponse);
  rpc SetAsAdmin(SetAsAdminRequest) returns (SetAsAdminResponse);
  rpc UnsetAdmin(UnsetAdminRequest) returns (UnsetAdminResponse);
  rpc GetName(GetNameRequest) returns (GetNameResponse);
  rpc SetPlatformRole(SetPlatformRoleRequest) returns (SetPlatformRoleResponse);
  rpc UnsetPlatformRole(UnsetPlatformRoleRequest) returns (UnsetPlatformRoleResponse);
  rpc SetTenantRole(SetTenantRoleRequest) returns (SetTenantRoleResponse);
  rpc UnsetTenantRole(UnsetTenantRoleRequest) returns (UnsetTenantRoleResponse);
}
