syntax = "proto3";

package scow.server;

import "google/protobuf/timestamp.proto";

enum ChangeStorageQuotaMode {
  INCREASE = 0;
  DECREASE = 1;
  SET = 2;
}

message ChangeStorageQuotaRequest {
  string user_id = 1;
  string cluster = 2;
  ChangeStorageQuotaMode mode = 3;
  uint64 value = 4;
}

// INVALID_ARGUMENT: change value is not valid.
// NOT_FOUND: user_id or cluster is not found
message ChangeStorageQuotaReply { uint64 current_quota = 1; }

message QueryStorageQuotaRequest {
  string user_id = 1;
  string cluster = 2;
}

// NOT_FOUND: cluster or userId is not found.
message QueryStorageQuotaReply { uint64 current_quota = 1; }

message ImportUsersData {
  repeated AccountInfo accounts = 1;
  repeated UserInfo users = 2;
}

message ImportUsersRequest {
  ImportUsersData data = 1;
  bool whitelist = 2;
}

// INVAD_ARGUMENT: the data format is not acceptable
message ImportUsersReply {
  uint32 user_count = 1;
  uint32 account_count = 2;
  uint32 users_without_name = 3;
}

message UserInAccount {
  string user_id = 1;
  string state = 2;
}

message AccountInfo {
  string account_name = 1;
  repeated UserInAccount users = 2;
  optional string owner = 3;
}

message UserInfo {
  string user_id = 1;
  string user_name = 2;
  repeated string accounts = 3;
}

message GetClusterUsersRequest {
  string cluster = 1;
}

message GetClusterUsersReply {
  repeated AccountInfo accounts = 1;
  repeated UserInfo users = 2;
}

message GetFetchInfoRequest {}

message GetFetchInfoReply {
  bool fetch_started = 1;
  string schedule = 2;
  optional google.protobuf.Timestamp last_fetch_time = 3;
}

message SetFetchStateRequest { bool started = 1; }
message SetFetchStateReply {}

message FetchJobsRequest {}
message FetchJobsReply { uint32 new_jobs_count = 1; }

service AdminService {
  rpc ChangeStorageQuota(ChangeStorageQuotaRequest)
      returns (ChangeStorageQuotaReply);
  rpc QueryStorageQuota(QueryStorageQuotaRequest)
      returns (QueryStorageQuotaReply);
  rpc ImportUsers(ImportUsersRequest) returns (ImportUsersReply);
  rpc GetClusterUsers(GetClusterUsersRequest) returns (GetClusterUsersReply);
  rpc GetFetchInfo(GetFetchInfoRequest) returns (GetFetchInfoReply);
  rpc SetFetchState(SetFetchStateRequest) returns (SetFetchStateReply);
  rpc FetchJobs(FetchJobsRequest) returns (FetchJobsReply);
}
