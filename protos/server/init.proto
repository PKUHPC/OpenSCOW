syntax = "proto3";

package scow.server;

message QuerySystemInitializedRequest {}
message QuerySystemInitializedReply { bool initialized = 1; }

message CreateInitAdminRequest {
  string user_id = 1;
  string name = 2;
  string email = 3;
  string password = 4;
  optional bool exists_in_auth = 5;
}
message CreateInitAdminReply {
  bool created = 1;
  optional string  error_type = 2;
}

message CompleteInitRequest {}

message CompleteInitReply {}

message SetAsInitAdminRequest {
  string user_id = 1;
}

message SetAsInitAdminReply {}

message UnsetInitAdminRequest {
  string user_id = 1;
}
message UnsetInitAdminReply {}
message userExistsRequest {
  string user_id = 1;
}
message userExistsReply {
  bool exists_in_scow= 1;
  optional bool exists_in_auth = 2;
}


service InitService {
  rpc QuerySystemInitialized(QuerySystemInitializedRequest)
      returns (QuerySystemInitializedReply);

  rpc CreateInitAdmin(CreateInitAdminRequest)
      returns (CreateInitAdminReply);

  // ALREADY_EXISTS: already initialized
  rpc CompleteInit(CompleteInitRequest) returns (CompleteInitReply);

  // Set a user as PLATFORM_ADMIN and default tenant's TENANT_ADMIN
  // NOT_FOUND: the user is not found in default tenant
  rpc SetAsInitAdmin(SetAsInitAdminRequest) returns (SetAsInitAdminReply);

  // Unset a user's PLATFORM_ADMIN and default tenant's TENANT_ADMIN role
  // NOT_FOUND: the user is not found in default tenant
  rpc UnsetInitAdmin(UnsetInitAdminRequest) returns (UnsetInitAdminReply);
  rpc userExists(userExistsRequest) returns (userExistsReply);

}
