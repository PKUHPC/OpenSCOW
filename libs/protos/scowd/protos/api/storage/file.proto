syntax = "proto3";

package api.storage;

option go_package = "scowd/protos/gen/api/storage;apiv1";

enum FileType {
  FILE = 0;
  DIR = 1;
}

message FileInfo {
  FileType file_type = 1;
  string name = 2;
  string mod_time = 3;
  uint64 size_byte = 4;
  uint32 mode = 5;
}

message ReadDirectoryRequest {
  string user_id = 1;
  string dir_path = 2;
}

message ReadDirectoryResponse {
  repeated FileInfo files_info = 1;
}

message CreateFileRequest {
  string user_id = 1;
  string file_path = 2;
}

message CreateFileResponse {
}

message MakeDirectoryRequest {
  string user_id = 1;
  string dir_path = 2;
}

message MakeDirectoryResponse {
}

message DeleteDirectoryRequest {
  string user_id = 1;
  string dir_path = 2;
}

message DeleteDirectoryResponse {
}

message DeleteFileRequest {
  string user_id = 1;
  string file_path = 2;
}

message DeleteFileResponse {
}

message WriteFileRequest {
  string user_id = 1;
  string file_path = 2;
  string content = 3;
}

message WriteFileResponse {
}

message ReadFileRequest {
  string user_id = 1;
  string file_path = 2;
}

message ReadFileResponse {
  bytes content = 1;
}

message ChangeModeRequest {
  string user_id = 1;
  string path = 2;
  uint32 mode = 3;
}

message ChangeModeResponse {
}

message GetFileMetadataRequest {
  string user_id = 1;
  string file_path = 2;
}

message GetFileMetadataResponse {
  uint64 size_byte = 1;
  FileType type = 2;
}

message GetHomeDirectoryRequest {
  string user_id = 1;
}

message GetHomeDirectoryResponse {
  string path = 1;
}

message MoveRequest {
  string user_id = 1;
  string from_path = 2;
  string to_path = 3;
}

message MoveResponse {
}

message ExistsRequest {
  string user_id = 1;
  string path = 2;
}

message ExistsResponse {
  bool exists = 1;
}

message CopyRequest {
  string user_id = 1;
  string from_path = 2;
  string to_path = 3;
}

message CopyResponse {
}

message InitMultipartUploadRequest {
  string user_id = 1;
  string path = 2;
  string name = 3;
}

message InitMultipartUploadResponse {
  string temp_file_dir = 1;
  uint64 chunk_size_byte = 2;
  repeated FileInfo files_info = 3;
}

message UploadRequest {

  message Info {
    string user_id = 1;
    string path = 2;
  }

  oneof message {
    Info info = 1;
    bytes chunk = 2;
  };
}

message UploadResponse {
  uint64 written_bytes = 1;
}

message MergeFileChunksRequest {
  string user_id = 1;
  string path = 2;
  string name = 3;
  uint64 size_byte = 4;
}

message MergeFileChunksResponse {
}

message DownloadRequest {
  string user_id = 1;
  string path = 2;
  uint32 chunk_size_byte = 3;
}

message DownloadResponse {
  bytes chunk = 1;
}

message DownloadAndCompressRequest {
  string user_id = 1;
  repeated string paths = 2; // 需要压缩的文件或目录路径
  uint32 chunk_size_byte = 3;
}

message DownloadAndCompressResponse {
  bytes chunk = 1;
}

message CompressFilesRequest {
  string user_id = 1;
  // 需压缩的文件路径
  repeated string paths = 2;
  // 目标压缩文件路径
  string archive_path = 3;
}

message CompressFilesResponse {}

message TransferInfo {
  string to_cluster = 1;
  string file_path = 2;
  uint64 transfer_size_kb = 3; // 单位为KB，B：Byte
  uint32 progress = 4;
  float speed_k_bps = 5;
  uint64 remaining_time_seconds = 6;
}

message StartFileTransferRequest {
  string user_id = 1;
  string to_transfer_node_host = 2;
  string to_transfer_node_port = 3;
  string from_path = 4;
  string to_path = 5;
}

message StartFileTransferResponse {

}

message QueryFileTransferRequest {
  string user_id = 1;
}

message QueryFileTransferResponse {
  repeated TransferInfo transfer_infos = 1;
}

message TerminateFileTransferRequest {
  string user_id = 1;
  string to_transfer_node_host = 2;
  string from_path = 3;
}

message TerminateFileTransferResponse {

}

message CheckTransferKeyRequest {
  string user_id = 1;
  string to_transfer_node_host = 2;
  string to_transfer_node_port = 3;
}

message CheckTransferKeyResponse {

}

service FileService {
  rpc Copy(CopyRequest) returns (CopyResponse) {}
  rpc Move(MoveRequest) returns (MoveResponse) {}
  rpc Exists(ExistsRequest) returns (ExistsResponse) {}

  rpc ReadDirectory(ReadDirectoryRequest) returns (ReadDirectoryResponse) {}
  rpc MakeDirectory(MakeDirectoryRequest) returns (MakeDirectoryResponse) {}
  rpc DeleteDirectory(DeleteDirectoryRequest) returns (DeleteDirectoryResponse) {}

  rpc CreateFile(CreateFileRequest) returns (CreateFileResponse) {}
  rpc DeleteFile(DeleteFileRequest) returns (DeleteFileResponse) {}
  // 写入文件大小限制为 10 MB，上传更大文件考虑使用分片上传相关接口
  rpc WriteFile(WriteFileRequest) returns (WriteFileResponse) {};
  // 读取文件大小限制为 10 MB，读取更大文件考虑使用 Download 接口
  rpc ReadFile(ReadFileRequest) returns (ReadFileResponse) {};

  rpc ChangeMode(ChangeModeRequest) returns (ChangeModeResponse) {};

  rpc Download(DownloadRequest) returns (stream DownloadResponse);
  // 下载并压缩，将压缩数据以流的方式返回
  rpc DownloadAndCompress (DownloadAndCompressRequest) returns (stream DownloadAndCompressResponse);
  rpc InitMultipartUpload(InitMultipartUploadRequest) returns (InitMultipartUploadResponse);
  rpc Upload(stream UploadRequest) returns (UploadResponse);
  rpc MergeFileChunks(MergeFileChunksRequest) returns (MergeFileChunksResponse);

  rpc CompressFiles(CompressFilesRequest) returns (CompressFilesResponse);

  rpc GetFileMetadata(GetFileMetadataRequest) returns (GetFileMetadataResponse);
  rpc GetHomeDirectory(GetHomeDirectoryRequest) returns (GetHomeDirectoryResponse);

  rpc StartFileTransfer(StartFileTransferRequest) returns (StartFileTransferResponse);
  rpc QueryFileTransfer(QueryFileTransferRequest) returns (QueryFileTransferResponse);
  rpc TerminateFileTransfer(TerminateFileTransferRequest) returns (TerminateFileTransferResponse);
  rpc CheckTransferKey(CheckTransferKeyRequest) returns (CheckTransferKeyResponse);
}
