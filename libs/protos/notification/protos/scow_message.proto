syntax = "proto3";

package scow_notification;

import "protos/message_common.proto";
import "google/protobuf/struct.proto";

message Message {
  uint64 id = 1;
  MessageType message_type = 2;
  google.protobuf.Struct metadata = 3;
  repeated string descriptions = 4;
  optional bool is_read = 5;
  string created_at = 6;
  string updated_at = 7;
}

message MessageData {
  optional TargetType target_type = 1;
  repeated string target_ids = 2;
  string message_type = 3;
  google.protobuf.Struct metadata = 4;
  repeated string description_data = 5;
}

message SystemSendMessageRequest {
  string system_id = 1;
  optional TargetType target_type = 2;
  repeated string target_ids = 3;
  string message_type = 4;
  google.protobuf.Struct metadata = 5;
  repeated string description_data = 6;
  optional MessageType message_type_template = 7;
}

message SystemSendMessageResponse {
}

message SystemBatchSendMessagesRequest {
  string system_id = 1;
  repeated MessageData messages = 2;
}

message SystemBatchSendMessagesResponse {
}

message ListMessagesRequest {
  string user_id = 1;
  optional string message_type = 2;
  optional string category = 3;
  optional NoticeType notice_type = 4;
  optional ReadStatus read_status = 5;
  optional uint32 page = 6;
  optional uint32 page_size = 7;
}

message ListMessagesResponse {
  optional uint64 total_count = 1;
  repeated Message messages = 2;
}

message MarkMessageReadRequest {
  string user_id = 1;
  uint64 message_id = 2;
}

message MarkMessageReadResponse {
}

service ScowMessageService {
  rpc SystemSendMessage(SystemSendMessageRequest) returns (SystemSendMessageResponse);
  rpc SystemBatchSendMessages(SystemBatchSendMessagesRequest) returns (SystemBatchSendMessagesResponse);

  rpc ListMessages(ListMessagesRequest) returns (ListMessagesResponse);

  rpc MarkMessageRead(MarkMessageReadRequest) returns (MarkMessageReadResponse);
}
